// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.1
// 	codegen	v0.0.0-SNAPSHOT-d72f800
// 	go		go1.22.3
// source: lmq.proto

package lmq

import (
	core "github.com/lazygophers/lrpc/middleware/core"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/descriptorpb"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// @range: 30000-30200
type ErrCode int32

const (
	ErrCode_Success         ErrCode = 0
	ErrCode_TopicNotFound   ErrCode = 30000 // topic not found
	ErrCode_ChannelNotFound ErrCode = 30001 // channel not found
	ErrCode_MessageTooLarge ErrCode = 30002 // message too large
	ErrCode_QueueEmpty      ErrCode = 30003 // queue is empty
)

// Enum value maps for ErrCode.
var (
	ErrCode_name = map[int32]string{
		0:     "Success",
		30000: "TopicNotFound",
		30001: "ChannelNotFound",
		30002: "MessageTooLarge",
		30003: "QueueEmpty",
	}
	ErrCode_value = map[string]int32{
		"Success":         0,
		"TopicNotFound":   30000,
		"ChannelNotFound": 30001,
		"MessageTooLarge": 30002,
		"QueueEmpty":      30003,
	}
)

func (x ErrCode) Enum() *ErrCode {
	p := new(ErrCode)
	*p = x
	return p
}

func (x ErrCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrCode) Descriptor() protoreflect.EnumDescriptor {
	return file_lmq_proto_enumTypes[0].Descriptor()
}

func (ErrCode) Type() protoreflect.EnumType {
	return &file_lmq_proto_enumTypes[0]
}

func (x ErrCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrCode.Descriptor instead.
func (ErrCode) EnumDescriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{0}
}

type Channel struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// @validate: required
	Client *core.ServiceDiscoveryClient `protobuf:"bytes,2,opt,name=client,proto3" json:"client,omitempty" validate:"required"`
	// 最大并发数
	ConcurrentCount uint32 `protobuf:"varint,11,opt,name=concurrent_count,json=concurrentCount,proto3" json:"concurrent_count,omitempty"`
	// 最大重试次数
	MaxRetryCount uint32 `protobuf:"varint,12,opt,name=max_retry_count,json=maxRetryCount,proto3" json:"max_retry_count,omitempty"`
	// 最大执行时间
	MaxExecTime *durationpb.Duration `protobuf:"bytes,13,opt,name=max_exec_time,json=maxExecTime,proto3" json:"max_exec_time,omitempty"`
	// 消息延期执行时间
	DelayTime *durationpb.Duration `protobuf:"bytes,14,opt,name=delay_time,json=delayTime,proto3" json:"delay_time,omitempty"`
	// 消息过期时间
	ExpiryTime *durationpb.Duration `protobuf:"bytes,15,opt,name=expiry_time,json=expiryTime,proto3" json:"expiry_time,omitempty"`
	// 最小重试间隔
	MinRetryInterval *durationpb.Duration `protobuf:"bytes,16,opt,name=min_retry_interval,json=minRetryInterval,proto3" json:"min_retry_interval,omitempty"`
	// 最大重试间隔
	MaxRetryInterval *durationpb.Duration `protobuf:"bytes,17,opt,name=max_retry_interval,json=maxRetryInterval,proto3" json:"max_retry_interval,omitempty"`
	// 指定消费的 tags
	TagList []string `protobuf:"bytes,18,rep,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty"`
}

func (x *Channel) Reset() {
	*x = Channel{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Channel) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Channel) ProtoMessage() {}

func (x *Channel) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Channel.ProtoReflect.Descriptor instead.
func (*Channel) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{0}
}

func (x *Channel) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Channel) GetClient() *core.ServiceDiscoveryClient {
	if x != nil {
		return x.Client
	}
	return nil
}

func (x *Channel) GetConcurrentCount() uint32 {
	if x != nil {
		return x.ConcurrentCount
	}
	return 0
}

func (x *Channel) GetMaxRetryCount() uint32 {
	if x != nil {
		return x.MaxRetryCount
	}
	return 0
}

func (x *Channel) GetMaxExecTime() *durationpb.Duration {
	if x != nil {
		return x.MaxExecTime
	}
	return nil
}

func (x *Channel) GetDelayTime() *durationpb.Duration {
	if x != nil {
		return x.DelayTime
	}
	return nil
}

func (x *Channel) GetExpiryTime() *durationpb.Duration {
	if x != nil {
		return x.ExpiryTime
	}
	return nil
}

func (x *Channel) GetMinRetryInterval() *durationpb.Duration {
	if x != nil {
		return x.MinRetryInterval
	}
	return nil
}

func (x *Channel) GetMaxRetryInterval() *durationpb.Duration {
	if x != nil {
		return x.MaxRetryInterval
	}
	return nil
}

func (x *Channel) GetTagList() []string {
	if x != nil {
		return x.TagList
	}
	return nil
}

type DiskQueue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MaxFilePartSize uint64 `protobuf:"varint,1,opt,name=max_file_part_size,json=maxFilePartSize,proto3" json:"max_file_part_size,omitempty"`
}

func (x *DiskQueue) Reset() {
	*x = DiskQueue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DiskQueue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DiskQueue) ProtoMessage() {}

func (x *DiskQueue) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DiskQueue.ProtoReflect.Descriptor instead.
func (*DiskQueue) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{1}
}

func (x *DiskQueue) GetMaxFilePartSize() uint64 {
	if x != nil {
		return x.MaxFilePartSize
	}
	return 0
}

type Topic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @validate: required
	Name        string     `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" validate:"required"`
	CreatedAt   int64      `protobuf:"varint,2,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt   int64      `protobuf:"varint,3,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	ChannelList []*Channel `protobuf:"bytes,4,rep,name=channel_list,json=channelList,proto3" json:"channel_list,omitempty"`
	DiskQueue   *DiskQueue `protobuf:"bytes,5,opt,name=disk_queue,json=diskQueue,proto3" json:"disk_queue,omitempty"`
	MaxMsgSize  uint64     `protobuf:"varint,6,opt,name=max_msg_size,json=maxMsgSize,proto3" json:"max_msg_size,omitempty"`
}

func (x *Topic) Reset() {
	*x = Topic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Topic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Topic) ProtoMessage() {}

func (x *Topic) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Topic.ProtoReflect.Descriptor instead.
func (*Topic) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{2}
}

func (x *Topic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Topic) GetCreatedAt() int64 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Topic) GetUpdatedAt() int64 {
	if x != nil {
		return x.UpdatedAt
	}
	return 0
}

func (x *Topic) GetChannelList() []*Channel {
	if x != nil {
		return x.ChannelList
	}
	return nil
}

func (x *Topic) GetDiskQueue() *DiskQueue {
	if x != nil {
		return x.DiskQueue
	}
	return nil
}

func (x *Topic) GetMaxMsgSize() uint64 {
	if x != nil {
		return x.MaxMsgSize
	}
	return 0
}

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	MsgId     string                 `protobuf:"bytes,2,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	// @validate: required
	Data []byte `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty" validate:"required"`
	// 可以指定某一个 channel 只消费特定 tags
	TagList []string `protobuf:"bytes,4,rep,name=tag_list,json=tagList,proto3" json:"tag_list,omitempty"`
	// 用于单一 channel 内的穿行话，防止多资源间的抢占
	Hash uint32 `protobuf:"varint,5,opt,name=hash,proto3" json:"hash,omitempty"`
	// 重试计数
	RetryCount uint32 `protobuf:"varint,6,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	// 最大重试次数
	MaxRetryCount uint32 `protobuf:"varint,9,opt,name=max_retry_count,json=maxRetryCount,proto3" json:"max_retry_count,omitempty"`
	// 最大执行时间
	MaxExecTime *durationpb.Duration `protobuf:"bytes,10,opt,name=max_exec_time,json=maxExecTime,proto3" json:"max_exec_time,omitempty"`
	// 最早的执行时间
	ExecAt *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=exec_at,json=execAt,proto3" json:"exec_at,omitempty"`
	// 过期时间
	ExpireAt *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=expire_at,json=expireAt,proto3" json:"expire_at,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{3}
}

func (x *Message) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Message) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *Message) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *Message) GetTagList() []string {
	if x != nil {
		return x.TagList
	}
	return nil
}

func (x *Message) GetHash() uint32 {
	if x != nil {
		return x.Hash
	}
	return 0
}

func (x *Message) GetRetryCount() uint32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *Message) GetMaxRetryCount() uint32 {
	if x != nil {
		return x.MaxRetryCount
	}
	return 0
}

func (x *Message) GetMaxExecTime() *durationpb.Duration {
	if x != nil {
		return x.MaxExecTime
	}
	return nil
}

func (x *Message) GetExecAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExecAt
	}
	return nil
}

func (x *Message) GetExpireAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ExpireAt
	}
	return nil
}

type SetTopicReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @validate: required
	Topic *Topic `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty" validate:"required"`
}

func (x *SetTopicReq) Reset() {
	*x = SetTopicReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTopicReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTopicReq) ProtoMessage() {}

func (x *SetTopicReq) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTopicReq.ProtoReflect.Descriptor instead.
func (*SetTopicReq) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{4}
}

func (x *SetTopicReq) GetTopic() *Topic {
	if x != nil {
		return x.Topic
	}
	return nil
}

type SetTopicRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic *Topic `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *SetTopicRsp) Reset() {
	*x = SetTopicRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTopicRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTopicRsp) ProtoMessage() {}

func (x *SetTopicRsp) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTopicRsp.ProtoReflect.Descriptor instead.
func (*SetTopicRsp) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{5}
}

func (x *SetTopicRsp) GetTopic() *Topic {
	if x != nil {
		return x.Topic
	}
	return nil
}

type GetTopicReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @validate: required
	TopicName string `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty" validate:"required"`
	ShowDepth bool   `protobuf:"varint,2,opt,name=show_depth,json=showDepth,proto3" json:"show_depth,omitempty"`
}

func (x *GetTopicReq) Reset() {
	*x = GetTopicReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopicReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopicReq) ProtoMessage() {}

func (x *GetTopicReq) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopicReq.ProtoReflect.Descriptor instead.
func (*GetTopicReq) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{6}
}

func (x *GetTopicReq) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *GetTopicReq) GetShowDepth() bool {
	if x != nil {
		return x.ShowDepth
	}
	return false
}

type GetTopicRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Topic *Topic `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	Depth int64  `protobuf:"varint,2,opt,name=depth,proto3" json:"depth,omitempty"`
}

func (x *GetTopicRsp) Reset() {
	*x = GetTopicRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTopicRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTopicRsp) ProtoMessage() {}

func (x *GetTopicRsp) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTopicRsp.ProtoReflect.Descriptor instead.
func (*GetTopicRsp) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{7}
}

func (x *GetTopicRsp) GetTopic() *Topic {
	if x != nil {
		return x.Topic
	}
	return nil
}

func (x *GetTopicRsp) GetDepth() int64 {
	if x != nil {
		return x.Depth
	}
	return 0
}

type ListTopicReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTopicReq) Reset() {
	*x = ListTopicReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTopicReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTopicReq) ProtoMessage() {}

func (x *ListTopicReq) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTopicReq.ProtoReflect.Descriptor instead.
func (*ListTopicReq) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{8}
}

type ListTopicRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TopicList []*Topic `protobuf:"bytes,1,rep,name=topic_list,json=topicList,proto3" json:"topic_list,omitempty"`
}

func (x *ListTopicRsp) Reset() {
	*x = ListTopicRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTopicRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTopicRsp) ProtoMessage() {}

func (x *ListTopicRsp) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTopicRsp.ProtoReflect.Descriptor instead.
func (*ListTopicRsp) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{9}
}

func (x *ListTopicRsp) GetTopicList() []*Topic {
	if x != nil {
		return x.TopicList
	}
	return nil
}

type SetChannelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @validate: required
	TopicName string `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty" validate:"required"`
	// @validate: required
	Channel *Channel `protobuf:"bytes,2,opt,name=channel,proto3" json:"channel,omitempty" validate:"required"`
}

func (x *SetChannelReq) Reset() {
	*x = SetChannelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChannelReq) ProtoMessage() {}

func (x *SetChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChannelReq.ProtoReflect.Descriptor instead.
func (*SetChannelReq) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{10}
}

func (x *SetChannelReq) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *SetChannelReq) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type SetChannelRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *SetChannelRsp) Reset() {
	*x = SetChannelRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetChannelRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetChannelRsp) ProtoMessage() {}

func (x *SetChannelRsp) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetChannelRsp.ProtoReflect.Descriptor instead.
func (*SetChannelRsp) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{11}
}

func (x *SetChannelRsp) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type DeleteTopicReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @validate: required
	TopicName string `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty" validate:"required"`
}

func (x *DeleteTopicReq) Reset() {
	*x = DeleteTopicReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTopicReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTopicReq) ProtoMessage() {}

func (x *DeleteTopicReq) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTopicReq.ProtoReflect.Descriptor instead.
func (*DeleteTopicReq) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteTopicReq) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

type DeleteTopicRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteTopicRsp) Reset() {
	*x = DeleteTopicRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTopicRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTopicRsp) ProtoMessage() {}

func (x *DeleteTopicRsp) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTopicRsp.ProtoReflect.Descriptor instead.
func (*DeleteTopicRsp) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{13}
}

type DeleteChannelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @validate: required
	TopicName string `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty" validate:"required"`
	// @validate: required
	ChannelName string `protobuf:"bytes,2,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty" validate:"required"`
}

func (x *DeleteChannelReq) Reset() {
	*x = DeleteChannelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChannelReq) ProtoMessage() {}

func (x *DeleteChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChannelReq.ProtoReflect.Descriptor instead.
func (*DeleteChannelReq) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteChannelReq) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *DeleteChannelReq) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

type DeleteChannelRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteChannelRsp) Reset() {
	*x = DeleteChannelRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteChannelRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteChannelRsp) ProtoMessage() {}

func (x *DeleteChannelRsp) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteChannelRsp.ProtoReflect.Descriptor instead.
func (*DeleteChannelRsp) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{15}
}

type GetChannelReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @validate: required
	TopicName string `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty" validate:"required"`
	// @validate: required
	ChannelName string `protobuf:"bytes,2,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty" validate:"required"`
}

func (x *GetChannelReq) Reset() {
	*x = GetChannelReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelReq) ProtoMessage() {}

func (x *GetChannelReq) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelReq.ProtoReflect.Descriptor instead.
func (*GetChannelReq) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{16}
}

func (x *GetChannelReq) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *GetChannelReq) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

type GetChannelRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Channel *Channel `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *GetChannelRsp) Reset() {
	*x = GetChannelRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetChannelRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetChannelRsp) ProtoMessage() {}

func (x *GetChannelRsp) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetChannelRsp.ProtoReflect.Descriptor instead.
func (*GetChannelRsp) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{17}
}

func (x *GetChannelRsp) GetChannel() *Channel {
	if x != nil {
		return x.Channel
	}
	return nil
}

type PubReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @validate: required
	TopicName string `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty" validate:"required"`
	// 可选的，如果存在则表示给单一 channel 推送
	ChannelName string `protobuf:"bytes,2,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	// @validate: required
	Msg *Message `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty" validate:"required"`
}

func (x *PubReq) Reset() {
	*x = PubReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubReq) ProtoMessage() {}

func (x *PubReq) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubReq.ProtoReflect.Descriptor instead.
func (*PubReq) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{18}
}

func (x *PubReq) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *PubReq) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *PubReq) GetMsg() *Message {
	if x != nil {
		return x.Msg
	}
	return nil
}

type PubRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId string `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
}

func (x *PubRsp) Reset() {
	*x = PubRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PubRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubRsp) ProtoMessage() {}

func (x *PubRsp) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubRsp.ProtoReflect.Descriptor instead.
func (*PubRsp) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{19}
}

func (x *PubRsp) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

type BatchPubReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @validate: required
	TopicName string `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty" validate:"required"`
	// 可选的，如果存在则表示给单一 channel 推送
	ChannelName string `protobuf:"bytes,2,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty"`
	// @validate: required,min=1
	MsgList        []*Message `protobuf:"bytes,3,rep,name=msg_list,json=msgList,proto3" json:"msg_list,omitempty" validate:"required,min=1"`
	BreakWhenError bool       `protobuf:"varint,4,opt,name=break_when_error,json=breakWhenError,proto3" json:"break_when_error,omitempty"`
}

func (x *BatchPubReq) Reset() {
	*x = BatchPubReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchPubReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchPubReq) ProtoMessage() {}

func (x *BatchPubReq) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchPubReq.ProtoReflect.Descriptor instead.
func (*BatchPubReq) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{20}
}

func (x *BatchPubReq) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *BatchPubReq) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *BatchPubReq) GetMsgList() []*Message {
	if x != nil {
		return x.MsgList
	}
	return nil
}

func (x *BatchPubReq) GetBreakWhenError() bool {
	if x != nil {
		return x.BreakWhenError
	}
	return false
}

type BatchPubRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgIdList []string `protobuf:"bytes,1,rep,name=msg_id_list,json=msgIdList,proto3" json:"msg_id_list,omitempty"`
}

func (x *BatchPubRsp) Reset() {
	*x = BatchPubRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BatchPubRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BatchPubRsp) ProtoMessage() {}

func (x *BatchPubRsp) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BatchPubRsp.ProtoReflect.Descriptor instead.
func (*BatchPubRsp) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{21}
}

func (x *BatchPubRsp) GetMsgIdList() []string {
	if x != nil {
		return x.MsgIdList
	}
	return nil
}

type QueuePop struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt  *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	RetryCount uint32                 `protobuf:"varint,2,opt,name=retry_count,json=retryCount,proto3" json:"retry_count,omitempty"`
	Data       []byte                 `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	MsgId      string                 `protobuf:"bytes,4,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	// 最大重试次数，业务可以根据这个字段做一些临界处理
	MaxRetryCount uint32 `protobuf:"varint,5,opt,name=max_retry_count,json=maxRetryCount,proto3" json:"max_retry_count,omitempty"`
}

func (x *QueuePop) Reset() {
	*x = QueuePop{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueuePop) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueuePop) ProtoMessage() {}

func (x *QueuePop) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueuePop.ProtoReflect.Descriptor instead.
func (*QueuePop) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{22}
}

func (x *QueuePop) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *QueuePop) GetRetryCount() uint32 {
	if x != nil {
		return x.RetryCount
	}
	return 0
}

func (x *QueuePop) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *QueuePop) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *QueuePop) GetMaxRetryCount() uint32 {
	if x != nil {
		return x.MaxRetryCount
	}
	return 0
}

type QueueDone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MsgId          string               `protobuf:"bytes,1,opt,name=msg_id,json=msgId,proto3" json:"msg_id,omitempty"`
	NeedRetry      bool                 `protobuf:"varint,2,opt,name=need_retry,json=needRetry,proto3" json:"need_retry,omitempty"`
	SkipRetryCount bool                 `protobuf:"varint,3,opt,name=skip_retry_count,json=skipRetryCount,proto3" json:"skip_retry_count,omitempty"`
	RetryWait      *durationpb.Duration `protobuf:"bytes,4,opt,name=retry_wait,json=retryWait,proto3" json:"retry_wait,omitempty"`
}

func (x *QueueDone) Reset() {
	*x = QueueDone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueueDone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueueDone) ProtoMessage() {}

func (x *QueueDone) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueueDone.ProtoReflect.Descriptor instead.
func (*QueueDone) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{23}
}

func (x *QueueDone) GetMsgId() string {
	if x != nil {
		return x.MsgId
	}
	return ""
}

func (x *QueueDone) GetNeedRetry() bool {
	if x != nil {
		return x.NeedRetry
	}
	return false
}

func (x *QueueDone) GetSkipRetryCount() bool {
	if x != nil {
		return x.SkipRetryCount
	}
	return false
}

func (x *QueueDone) GetRetryWait() *durationpb.Duration {
	if x != nil {
		return x.RetryWait
	}
	return nil
}

type ConsumeReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg *QueuePop `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ConsumeReq) Reset() {
	*x = ConsumeReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeReq) ProtoMessage() {}

func (x *ConsumeReq) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeReq.ProtoReflect.Descriptor instead.
func (*ConsumeReq) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{24}
}

func (x *ConsumeReq) GetMsg() *QueuePop {
	if x != nil {
		return x.Msg
	}
	return nil
}

type ConsumeRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg *QueueDone `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *ConsumeRsp) Reset() {
	*x = ConsumeRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConsumeRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsumeRsp) ProtoMessage() {}

func (x *ConsumeRsp) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsumeRsp.ProtoReflect.Descriptor instead.
func (*ConsumeRsp) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{25}
}

func (x *ConsumeRsp) GetMsg() *QueueDone {
	if x != nil {
		return x.Msg
	}
	return nil
}

type PopMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @validate: required
	TopicName string `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty" validate:"required"`
	// @validate: required
	ChannelName string `protobuf:"bytes,2,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty" validate:"required"`
}

func (x *PopMessageReq) Reset() {
	*x = PopMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopMessageReq) ProtoMessage() {}

func (x *PopMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopMessageReq.ProtoReflect.Descriptor instead.
func (*PopMessageReq) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{26}
}

func (x *PopMessageReq) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *PopMessageReq) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

type PopMessageRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg *QueuePop `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *PopMessageRsp) Reset() {
	*x = PopMessageRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PopMessageRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PopMessageRsp) ProtoMessage() {}

func (x *PopMessageRsp) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PopMessageRsp.ProtoReflect.Descriptor instead.
func (*PopMessageRsp) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{27}
}

func (x *PopMessageRsp) GetMsg() *QueuePop {
	if x != nil {
		return x.Msg
	}
	return nil
}

type FinishMessageReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// @validate: required
	TopicName string `protobuf:"bytes,1,opt,name=topic_name,json=topicName,proto3" json:"topic_name,omitempty" validate:"required"`
	// @validate: required
	ChannelName string `protobuf:"bytes,2,opt,name=channel_name,json=channelName,proto3" json:"channel_name,omitempty" validate:"required"`
	// @validate: required
	Msg *QueueDone `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty" validate:"required"`
}

func (x *FinishMessageReq) Reset() {
	*x = FinishMessageReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishMessageReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishMessageReq) ProtoMessage() {}

func (x *FinishMessageReq) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishMessageReq.ProtoReflect.Descriptor instead.
func (*FinishMessageReq) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{28}
}

func (x *FinishMessageReq) GetTopicName() string {
	if x != nil {
		return x.TopicName
	}
	return ""
}

func (x *FinishMessageReq) GetChannelName() string {
	if x != nil {
		return x.ChannelName
	}
	return ""
}

func (x *FinishMessageReq) GetMsg() *QueueDone {
	if x != nil {
		return x.Msg
	}
	return nil
}

type FinishMessageRsp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FinishMessageRsp) Reset() {
	*x = FinishMessageRsp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_lmq_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishMessageRsp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishMessageRsp) ProtoMessage() {}

func (x *FinishMessageRsp) ProtoReflect() protoreflect.Message {
	mi := &file_lmq_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishMessageRsp.ProtoReflect.Descriptor instead.
func (*FinishMessageRsp) Descriptor() ([]byte, []int) {
	return file_lmq_proto_rawDescGZIP(), []int{29}
}

var File_lmq_proto protoreflect.FileDescriptor

var file_lmq_proto_rawDesc = []byte{
	0x0a, 0x09, 0x6c, 0x6d, 0x71, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x6c, 0x6d, 0x71,
	0x1a, 0x20, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x99, 0x04, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x45, 0x0a, 0x06, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x6c, 0x61, 0x7a, 0x79, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72, 0x73, 0x2e, 0x6c, 0x72,
	0x70, 0x63, 0x2e, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x79, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x06,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x29, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x52,
	0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x6d, 0x61, 0x78,
	0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x61,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x61, 0x79, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x69, 0x72, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x47,
	0x0a, 0x12, 0x6d, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10, 0x6d, 0x69, 0x6e, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x10,
	0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x12, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x38, 0x0a, 0x09, 0x44,
	0x69, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x12, 0x2b, 0x0a, 0x12, 0x6d, 0x61, 0x78, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x6d, 0x61, 0x78, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xdb, 0x01, 0x0a, 0x05, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x12, 0x2f, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x43, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0a, 0x64, 0x69, 0x73, 0x6b, 0x5f, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x44, 0x69, 0x73,
	0x6b, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x09, 0x64, 0x69, 0x73, 0x6b, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x12, 0x20, 0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x6d, 0x73, 0x67, 0x5f, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x4d, 0x73, 0x67, 0x53,
	0x69, 0x7a, 0x65, 0x22, 0x94, 0x03, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x67, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x67, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x74,
	0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3d, 0x0a,
	0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0b, 0x6d, 0x61, 0x78, 0x45, 0x78, 0x65, 0x63, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x07,
	0x65, 0x78, 0x65, 0x63, 0x5f, 0x61, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x65, 0x78, 0x65, 0x63, 0x41,
	0x74, 0x12, 0x37, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x08, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x74, 0x22, 0x2f, 0x0a, 0x0b, 0x53, 0x65,
	0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x2f, 0x0a, 0x0b, 0x53,
	0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6c, 0x6d, 0x71, 0x2e,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x4b, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68,
	0x6f, 0x77, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x73, 0x68, 0x6f, 0x77, 0x44, 0x65, 0x70, 0x74, 0x68, 0x22, 0x45, 0x0a, 0x0b, 0x47, 0x65, 0x74,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65,
	0x70, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x22, 0x0e, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71,
	0x22, 0x39, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x73, 0x70,
	0x12, 0x29, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x0d, 0x53,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x07, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c,
	0x6d, 0x71, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x22, 0x37, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x2f, 0x0a, 0x0e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x10, 0x0a,
	0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x73, 0x70, 0x22,
	0x54, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x12, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x73, 0x70, 0x22, 0x51, 0x0a, 0x0d, 0x47, 0x65, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x37, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x73, 0x70, 0x12, 0x26, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x07, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x6a, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x52, 0x65, 0x71, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c,
	0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x1f, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x52, 0x73, 0x70, 0x12, 0x15, 0x0a, 0x06, 0x6d,
	0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67,
	0x49, 0x64, 0x22, 0xa2, 0x01, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50, 0x75, 0x62, 0x52,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x73, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x28, 0x0a,
	0x10, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x5f, 0x77, 0x68, 0x65, 0x6e, 0x5f, 0x65, 0x72, 0x72, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x57, 0x68,
	0x65, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x2d, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x75, 0x62, 0x52, 0x73, 0x70, 0x12, 0x1e, 0x0a, 0x0b, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x73, 0x67,
	0x49, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xb9, 0x01, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x50, 0x6f, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x61,
	0x78, 0x5f, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0d, 0x6d, 0x61, 0x78, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0xa5, 0x01, 0x0a, 0x09, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x6f, 0x6e, 0x65,
	0x12, 0x15, 0x0a, 0x06, 0x6d, 0x73, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6d, 0x73, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x65, 0x65, 0x64, 0x5f,
	0x72, 0x65, 0x74, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x6e, 0x65, 0x65,
	0x64, 0x52, 0x65, 0x74, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x10, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x72,
	0x65, 0x74, 0x72, 0x79, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x73, 0x6b, 0x69, 0x70, 0x52, 0x65, 0x74, 0x72, 0x79, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x38, 0x0a, 0x0a, 0x72, 0x65, 0x74, 0x72, 0x79, 0x5f, 0x77, 0x61, 0x69, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x09, 0x72, 0x65, 0x74, 0x72, 0x79, 0x57, 0x61, 0x69, 0x74, 0x22, 0x2d, 0x0a, 0x0a, 0x43, 0x6f,
	0x6e, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1f, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x50, 0x6f, 0x70, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x2e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e,
	0x73, 0x75, 0x6d, 0x65, 0x52, 0x73, 0x70, 0x12, 0x20, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x44, 0x6f, 0x6e, 0x65, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x51, 0x0a, 0x0d, 0x50, 0x6f, 0x70,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x30, 0x0a, 0x0d,
	0x50, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x73, 0x70, 0x12, 0x1f, 0x0a,
	0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x6c, 0x6d, 0x71,
	0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x50, 0x6f, 0x70, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x76,
	0x0a, 0x10, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x44, 0x6f, 0x6e,
	0x65, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x12, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x73, 0x70, 0x2a, 0x6b, 0x0a, 0x07, 0x45, 0x72,
	0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x10, 0x00, 0x12, 0x13, 0x0a, 0x0d, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x4e, 0x6f, 0x74, 0x46, 0x6f,
	0x75, 0x6e, 0x64, 0x10, 0xb0, 0xea, 0x01, 0x12, 0x15, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x4e, 0x6f, 0x74, 0x46, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0xb1, 0xea, 0x01, 0x12, 0x15,
	0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x6f, 0x4c, 0x61, 0x72, 0x67,
	0x65, 0x10, 0xb2, 0xea, 0x01, 0x12, 0x10, 0x0a, 0x0a, 0x51, 0x75, 0x65, 0x75, 0x65, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x10, 0xb3, 0xea, 0x01, 0x32, 0xd8, 0x04, 0x0a, 0x03, 0x6c, 0x6d, 0x71, 0x12,
	0x30, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x10, 0x2e, 0x6c, 0x6d,
	0x71, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e,
	0x6c, 0x6d, 0x71, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x30, 0x0a, 0x08, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x10, 0x2e,
	0x6c, 0x6d, 0x71, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x1a,
	0x10, 0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x12, 0x11, 0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x0b, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x13, 0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x6c,
	0x6d, 0x71, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x12, 0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x53, 0x65, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x12, 0x2e, 0x6c, 0x6d, 0x71, 0x2e,
	0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e,
	0x6c, 0x6d, 0x71, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x73,
	0x70, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x15, 0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6c, 0x6d,
	0x71, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52,
	0x73, 0x70, 0x22, 0x00, 0x12, 0x21, 0x0a, 0x03, 0x50, 0x75, 0x62, 0x12, 0x0b, 0x2e, 0x6c, 0x6d,
	0x71, 0x2e, 0x50, 0x75, 0x62, 0x52, 0x65, 0x71, 0x1a, 0x0b, 0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x50,
	0x75, 0x62, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x30, 0x0a, 0x08, 0x42, 0x61, 0x74, 0x63, 0x68,
	0x50, 0x75, 0x62, 0x12, 0x10, 0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x42, 0x61, 0x74, 0x63, 0x68, 0x50,
	0x75, 0x62, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x42, 0x61, 0x74, 0x63,
	0x68, 0x50, 0x75, 0x62, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x36, 0x0a, 0x0a, 0x50, 0x6f, 0x70,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x50, 0x6f,
	0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x6c, 0x6d,
	0x71, 0x2e, 0x50, 0x6f, 0x70, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x3f, 0x0a, 0x0d, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x15, 0x2e, 0x6c, 0x6d, 0x71, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x15, 0x2e, 0x6c, 0x6d, 0x71, 0x2e,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x42, 0x24, 0x80, 0xa6, 0x1d, 0x91, 0x4e, 0x5a, 0x1a, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x61, 0x7a, 0x79, 0x67, 0x6f, 0x70, 0x68, 0x65, 0x72,
	0x73, 0x2f, 0x6c, 0x6d, 0x71, 0xf8, 0x01, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_lmq_proto_rawDescOnce sync.Once
	file_lmq_proto_rawDescData = file_lmq_proto_rawDesc
)

func file_lmq_proto_rawDescGZIP() []byte {
	file_lmq_proto_rawDescOnce.Do(func() {
		file_lmq_proto_rawDescData = protoimpl.X.CompressGZIP(file_lmq_proto_rawDescData)
	})
	return file_lmq_proto_rawDescData
}

var file_lmq_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_lmq_proto_msgTypes = make([]protoimpl.MessageInfo, 30)
var file_lmq_proto_goTypes = []interface{}{
	(ErrCode)(0),                        // 0: lmq.ErrCode
	(*Channel)(nil),                     // 1: lmq.Channel
	(*DiskQueue)(nil),                   // 2: lmq.DiskQueue
	(*Topic)(nil),                       // 3: lmq.Topic
	(*Message)(nil),                     // 4: lmq.Message
	(*SetTopicReq)(nil),                 // 5: lmq.SetTopicReq
	(*SetTopicRsp)(nil),                 // 6: lmq.SetTopicRsp
	(*GetTopicReq)(nil),                 // 7: lmq.GetTopicReq
	(*GetTopicRsp)(nil),                 // 8: lmq.GetTopicRsp
	(*ListTopicReq)(nil),                // 9: lmq.ListTopicReq
	(*ListTopicRsp)(nil),                // 10: lmq.ListTopicRsp
	(*SetChannelReq)(nil),               // 11: lmq.SetChannelReq
	(*SetChannelRsp)(nil),               // 12: lmq.SetChannelRsp
	(*DeleteTopicReq)(nil),              // 13: lmq.DeleteTopicReq
	(*DeleteTopicRsp)(nil),              // 14: lmq.DeleteTopicRsp
	(*DeleteChannelReq)(nil),            // 15: lmq.DeleteChannelReq
	(*DeleteChannelRsp)(nil),            // 16: lmq.DeleteChannelRsp
	(*GetChannelReq)(nil),               // 17: lmq.GetChannelReq
	(*GetChannelRsp)(nil),               // 18: lmq.GetChannelRsp
	(*PubReq)(nil),                      // 19: lmq.PubReq
	(*PubRsp)(nil),                      // 20: lmq.PubRsp
	(*BatchPubReq)(nil),                 // 21: lmq.BatchPubReq
	(*BatchPubRsp)(nil),                 // 22: lmq.BatchPubRsp
	(*QueuePop)(nil),                    // 23: lmq.QueuePop
	(*QueueDone)(nil),                   // 24: lmq.QueueDone
	(*ConsumeReq)(nil),                  // 25: lmq.ConsumeReq
	(*ConsumeRsp)(nil),                  // 26: lmq.ConsumeRsp
	(*PopMessageReq)(nil),               // 27: lmq.PopMessageReq
	(*PopMessageRsp)(nil),               // 28: lmq.PopMessageRsp
	(*FinishMessageReq)(nil),            // 29: lmq.FinishMessageReq
	(*FinishMessageRsp)(nil),            // 30: lmq.FinishMessageRsp
	(*core.ServiceDiscoveryClient)(nil), // 31: lazygophers.lrpc.core.ServiceDiscoveryClient
	(*durationpb.Duration)(nil),         // 32: google.protobuf.Duration
	(*timestamppb.Timestamp)(nil),       // 33: google.protobuf.Timestamp
}
var file_lmq_proto_depIdxs = []int32{
	31, // 0: lmq.Channel.client:type_name -> lazygophers.lrpc.core.ServiceDiscoveryClient
	32, // 1: lmq.Channel.max_exec_time:type_name -> google.protobuf.Duration
	32, // 2: lmq.Channel.delay_time:type_name -> google.protobuf.Duration
	32, // 3: lmq.Channel.expiry_time:type_name -> google.protobuf.Duration
	32, // 4: lmq.Channel.min_retry_interval:type_name -> google.protobuf.Duration
	32, // 5: lmq.Channel.max_retry_interval:type_name -> google.protobuf.Duration
	1,  // 6: lmq.Topic.channel_list:type_name -> lmq.Channel
	2,  // 7: lmq.Topic.disk_queue:type_name -> lmq.DiskQueue
	33, // 8: lmq.Message.created_at:type_name -> google.protobuf.Timestamp
	32, // 9: lmq.Message.max_exec_time:type_name -> google.protobuf.Duration
	33, // 10: lmq.Message.exec_at:type_name -> google.protobuf.Timestamp
	33, // 11: lmq.Message.expire_at:type_name -> google.protobuf.Timestamp
	3,  // 12: lmq.SetTopicReq.topic:type_name -> lmq.Topic
	3,  // 13: lmq.SetTopicRsp.topic:type_name -> lmq.Topic
	3,  // 14: lmq.GetTopicRsp.topic:type_name -> lmq.Topic
	3,  // 15: lmq.ListTopicRsp.topic_list:type_name -> lmq.Topic
	1,  // 16: lmq.SetChannelReq.channel:type_name -> lmq.Channel
	1,  // 17: lmq.SetChannelRsp.channel:type_name -> lmq.Channel
	1,  // 18: lmq.GetChannelRsp.channel:type_name -> lmq.Channel
	4,  // 19: lmq.PubReq.msg:type_name -> lmq.Message
	4,  // 20: lmq.BatchPubReq.msg_list:type_name -> lmq.Message
	33, // 21: lmq.QueuePop.created_at:type_name -> google.protobuf.Timestamp
	32, // 22: lmq.QueueDone.retry_wait:type_name -> google.protobuf.Duration
	23, // 23: lmq.ConsumeReq.msg:type_name -> lmq.QueuePop
	24, // 24: lmq.ConsumeRsp.msg:type_name -> lmq.QueueDone
	23, // 25: lmq.PopMessageRsp.msg:type_name -> lmq.QueuePop
	24, // 26: lmq.FinishMessageReq.msg:type_name -> lmq.QueueDone
	5,  // 27: lmq.lmq.SetTopic:input_type -> lmq.SetTopicReq
	7,  // 28: lmq.lmq.GetTopic:input_type -> lmq.GetTopicReq
	9,  // 29: lmq.lmq.ListTopic:input_type -> lmq.ListTopicReq
	13, // 30: lmq.lmq.DeleteTopic:input_type -> lmq.DeleteTopicReq
	11, // 31: lmq.lmq.SetChannel:input_type -> lmq.SetChannelReq
	17, // 32: lmq.lmq.GetChannel:input_type -> lmq.GetChannelReq
	15, // 33: lmq.lmq.DeleteChannel:input_type -> lmq.DeleteChannelReq
	19, // 34: lmq.lmq.Pub:input_type -> lmq.PubReq
	21, // 35: lmq.lmq.BatchPub:input_type -> lmq.BatchPubReq
	27, // 36: lmq.lmq.PopMessage:input_type -> lmq.PopMessageReq
	29, // 37: lmq.lmq.FinishMessage:input_type -> lmq.FinishMessageReq
	6,  // 38: lmq.lmq.SetTopic:output_type -> lmq.SetTopicRsp
	8,  // 39: lmq.lmq.GetTopic:output_type -> lmq.GetTopicRsp
	10, // 40: lmq.lmq.ListTopic:output_type -> lmq.ListTopicRsp
	14, // 41: lmq.lmq.DeleteTopic:output_type -> lmq.DeleteTopicRsp
	12, // 42: lmq.lmq.SetChannel:output_type -> lmq.SetChannelRsp
	18, // 43: lmq.lmq.GetChannel:output_type -> lmq.GetChannelRsp
	16, // 44: lmq.lmq.DeleteChannel:output_type -> lmq.DeleteChannelRsp
	20, // 45: lmq.lmq.Pub:output_type -> lmq.PubRsp
	22, // 46: lmq.lmq.BatchPub:output_type -> lmq.BatchPubRsp
	28, // 47: lmq.lmq.PopMessage:output_type -> lmq.PopMessageRsp
	30, // 48: lmq.lmq.FinishMessage:output_type -> lmq.FinishMessageRsp
	38, // [38:49] is the sub-list for method output_type
	27, // [27:38] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_lmq_proto_init() }
func file_lmq_proto_init() {
	if File_lmq_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_lmq_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Channel); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DiskQueue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Topic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTopicReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTopicRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopicReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTopicRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTopicReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTopicRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChannelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetChannelRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTopicReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTopicRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChannelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteChannelRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetChannelRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PubRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchPubReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BatchPubRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueuePop); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueueDone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConsumeRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PopMessageRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishMessageReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_lmq_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishMessageRsp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_lmq_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   30,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_lmq_proto_goTypes,
		DependencyIndexes: file_lmq_proto_depIdxs,
		EnumInfos:         file_lmq_proto_enumTypes,
		MessageInfos:      file_lmq_proto_msgTypes,
	}.Build()
	File_lmq_proto = out.File
	file_lmq_proto_rawDesc = nil
	file_lmq_proto_goTypes = nil
	file_lmq_proto_depIdxs = nil
}
